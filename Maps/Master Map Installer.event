//Master Map Installer generated by TMX2EA.exe
#ifndef ChapterDataTable
  #ifdef _FE8_
    #define ChapterDataTable 0x8B0890
  #endif
  #ifdef _FE7_
    #define ChapterDataTable 0xC9A200
  #endif
#endif
#define SetChapterData(ChapterID,ObjectType1,ObjectType2,PaletteID,TileConfig,MapID,MapPointer,Anims1,Anims2,MapChanges) "PUSH; ORG ChapterDataTable+(ChapterID*148)+4; BYTE ObjectType1 ObjectType2 PaletteID TileConfig MapID Anims1 Anims2 MapChanges; EventPointerTable(MapID,MapPointer); POP" 

#ifndef EnemyItemAITable
  #define EnemyItemAITable 0xD8538
#endif
#define DoorKeyAI 0x01
#define LockpickAI 0x02
#define AntitoxinAI 0x04

#define SetEnemyItemAI(mapID, itemAI) "PUSH; ORG EnemyItemAITable+(mapID*4); BYTE itemAI; POP"

#ifndef EscapePointTable
  #define EscapePointTable 0x5A8188
#endif
//Do not go over map 0x40.
#define SetEscapePoints(mapID, pointer) "PUSH; ORG EscapePointTable+(mapID*4); POIN pointer; POP"

ALIGN 4
#include "WorldMapRoutesInstaller.event"
ALIGN 4

//tilesets
#include "Tilesets/TilesetInstaller.event"

//Alm maps
{
#include "ch1-1.event"
}
{
#include "ch1-2-new.event"
}
{
#include "ch1-3-new.event"
}
SetEscapePoints(0x02, Ch1_3_ThiefEscape)
{
#include "ch1-4.event"
}
PROTECT 0x8B0A57 0x8B0A58
{
#include "ch1-5.event"
}
SetEscapePoints(0x04, Ch1_5_ThiefEscape)
{
#include "ch1-6.event"
}
{
#include "ch1-7.event"
}
{
#include "ch1-8.event"
}
SetEscapePoints(0x07, Ch1_8_ThiefEscape)
//Celica maps
{
#include "ch2-1.event"
}
ALIGN 4
{
#include "ch2-2.event"
}
ALIGN 4
{
#include "ch2-3.event"
}
ALIGN 4
{
#include "ch2-4.event"
}
ALIGN 4
SetEscapePoints(0x0B, Ch2_4_ThiefEscape)
{
#include "ch2-5.event"
}
ALIGN 4
{
#include "ch2-6.event"
}
ALIGN 4
{
#include "ch2-7.event"
}
ALIGN 4
{
#include "ch3A-1.event"
}
ALIGN 4
{
#include "ch3C-1.event"
}
ALIGN 4
{
#include "ch3A-2.event"
}
ALIGN 4
{
#include "ch3C-2.event"
}
ALIGN 4
{
#include "ch3A-3.event"
}
ALIGN 4
{
#include "ch3C-3.event"
}
SetEscapePoints(0x18, Ch3_3C_ThiefEscape)
ALIGN 4
{
#include "ch3A-4_new.event"
}
SetEscapePoints(0x12, Ch3_4A_ThiefEscape)
ALIGN 4
{
#include "ch3C-4_dual.event"
}
ALIGN 4
{
#include "ch3A-5.event"
}
ALIGN 4
{
#include "ch3C-5.event"
}
ALIGN 4
{
#include "ch3A-6.event"
}
ALIGN 4
{
#include "ch3A-7.event"
}
ALIGN 4
//place at bottom
{
#include "dummymap.event"
}
ALIGN 4
{
#include "dummymap2.event"
}
ALIGN 4
{
#include "thiefshrine.event"
}
ALIGN 4
{
#include "deliverancehideout.event"
}
ALIGN 4
{
#include "seaboundshrine.event"
}
//for Seabound Shrine, have some enemies pop out when the chest is opened.

//Set whether AI can use door keys for a chapter (use OR | to combine bits)
SetEnemyItemAI(0x07, LockpickAI)
SetEnemyItemAI(0x12, LockpickAI)

//Thief escape points.
Ch1_3_ThiefEscape:
BYTE $00 $0C //coords
BYTE $00 //move left
BYTE $00 //separator
BYTE $FF $00 $00 $00 //terminator
Ch1_5_ThiefEscape:
BYTE $08 $0E //coords
BYTE $02 //move down
BYTE $00 //separator
BYTE $09 $0E //coords
BYTE $02 //move down
BYTE $00 //separator
BYTE $0A $0E //coords
BYTE $02 //move down
BYTE $00 //separator
BYTE $FF $00 $00 $00 //terminator
Ch1_8_ThiefEscape:
BYTE $02 $01 //coords
BYTE $05 //in situ (stairs)
BYTE $00 //separator
BYTE $13 $0F //coords
BYTE $05 //in situ (stairs)
BYTE $00 //separator
BYTE $FF $00 $00 $00 //terminator
Ch2_3_ThiefEscape:
BYTE $10 $07 //coords
BYTE $05 //in situ (stairs)
BYTE $00 //separator
BYTE $FF $00 $00 $00 //terminator
Ch2_4_ThiefEscape:
BYTE $10 $10 //coords
BYTE $02 //down
BYTE $00 //separator
BYTE $FF $00 $00 $00 //terminator
Ch3_4A_ThiefEscape:
BYTE $00 $06 //coords
BYTE $05 //in situ (stairs)
BYTE $00 //separator
BYTE $FF $00 $00 $00 //terminator
Ch3_3C_ThiefEscape:
BYTE $17 $09 //coords(23,9)
BYTE $01 //move right
BYTE $00 //separator
BYTE $FF $00 $00 $00 //terminator