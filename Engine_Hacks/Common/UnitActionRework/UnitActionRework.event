#ifndef HAX_ACTION_APPLICATION_REWORK_EVENT
#define HAX_ACTION_APPLICATION_REWORK_EVENT

#ifndef _FE8_
	ERROR _file_ is to be assembled for FE8
#endif // _FE8_

#include "Extensions/Hack Installation.txt"
#include "EAstdlib.event"
#include "_UnitMenuDefs.event"

#define pPlayerActionRoutineTable 0x1D0CC
#define adPlayerPhaseStandardAction "POIN $1D1C8" //anything over 0x22 uses this.
#define adPlayerPhaseBackout "POIN $1D158" //uses partialActionTaken to see if you can go back to the unit menu freely
//the rest of these store to partialActionTaken to let you canto.
#define adPlayerPhaseGiveTake "POIN $1D19C"
#define adPlayerPhase1B "POIN $1D17E"
#define adPlayerPhase1C "POIN $1D18C"
#define adPlayerPhasePostTrade "POIN $1D1B8"
#define adPlayerPhaseBallista "POIN $1D1AC"

#define NoActionRoutine "WORD 0"
#define ActionRoutine(apRoutine) "POIN apRoutine"
#define ActionRoutine(apRoutine, abForcedYeild) "WORD (0x08000000 | apRoutine | (abForcedYeild << 28))"

#define SetUnitAction(aActionId, adActionRoutine) "PUSH; ORG (pActionRoutineTable + 4*aActionId); adActionRoutine; POP"
#define SetUnitActionPlayerPhaseHandler(aActionId, adActionRoutine) "PUSH; ORG (pPlayerActionRoutineTable + 4*aActionId); adActionRoutine; POP"

PUSH
	ORG 0x3200C	
	replaceWithHack(prNewActionApplication)
	ORG 0x59D1F8
	POIN pUnitMenuCommandDefs
    
    //at 1D0CC there's a similar table for player phase PrepareAction. 
POP

ALIGN 4
prNewActionApplication:
	#incbin "asm/ApplyAction.bin"
	POIN pActionRoutineTable

ALIGN 4
prWaitAction:
	#incbin "asm/WaitAction.bin"

#ifndef ACTION_TABLE_SIZE
	#define ACTION_TABLE_SIZE 0x30
#endif

pActionRoutineTable:
	NoActionRoutine               // 0x00 ?
	ActionRoutine(prWaitAction+1) // 0x01 Wait
	ActionRoutine(0x3229D)        // 0x02 Combat
	ActionRoutine(0x2FC49, True)  // 0x03 Staff
	ActionRoutine(0x32359)        // 0x04 Dance
	NoActionRoutine               // 0x05 ?
	ActionRoutine(0x3247D)        // 0x06 Steal
	ActionRoutine(0x32555)        // 0x07 Summon
	ActionRoutine(0x32555)        // 0x08 Summon
	//ActionRoutine(0x32581)        // 0x08 Summon DK
	ActionRoutine(0x32165)        // 0x09 Rescue
	ActionRoutine(0x321E1)        // 0x0A Drop
	NoActionRoutine               // 0x0B Take
	NoActionRoutine               // 0x0C Give
	NoActionRoutine               // 0x0D ? (Used by Teq in one of his hacks)
	ActionRoutine(0x323A9)        // 0x0E Talk
	ActionRoutine(0x323D5)        // 0x0F Support
	ActionRoutine(0x32271)        // 0x10 Visit
	ActionRoutine(0x32271)        // 0x11 Sieze
	ActionRoutine(0x2FC49, True)  // 0x12 Door
	NoActionRoutine               // 0x13 Bridge?
	ActionRoutine(0x2FC49, True)  // 0x14 Chest
	ActionRoutine(0x2FFB5, True)  // 0x15 Pick
	NoActionRoutine               // 0x16 Armory
	NoActionRoutine               // 0x17 Vendor
	NoActionRoutine               // 0x18 Secret
	ActionRoutine(0x32345)        // 0x19 Arena
	ActionRoutine(0x2FC49, True)  // 0x1A Use Item
	NoActionRoutine               // 0x1B ?
	NoActionRoutine               // 0x1C ?
	NoActionRoutine               // 0x1D Post Trade/Supply
	NoActionRoutine               // 0x1E Wait 2 (needs more research)
	NoActionRoutine               // 0x1F Backing out (from a trap?)
	NoActionRoutine               // 0x20 Raid
	NoActionRoutine               // 0x21 Ride Ballista
	NoActionRoutine               // 0x22 Exit Ballista
	NoActionRoutine               // 0x23 FREE
	NoActionRoutine               // 0x24 FREE
	NoActionRoutine               // 0x25 FREE
	NoActionRoutine               // 0x26 FREE
	NoActionRoutine               // 0x27 FREE
	NoActionRoutine               // 0x28 FREE
	NoActionRoutine               // 0x29 FREE
	NoActionRoutine               // 0x2A FREE
	NoActionRoutine               // 0x2B FREE
	NoActionRoutine               // 0x2C FREE
	NoActionRoutine               // 0x2D FREE
	NoActionRoutine               // 0x2E FREE
	NoActionRoutine               // 0x2F FREE etc...

ORG (pActionRoutineTable+ACTION_TABLE_SIZE*4)

ALIGN 4  
pUnitMenuCommandDefs:
  //Use the macro MenuCommand(name,description,colour,usability,effect)
  //Color options: NormalText, GrayText, BlueText, OrangeText, GreenText (flashes), BlackText
  //MenuCommand(DualAtkTxtID,DualAtkDescId,0,DualAtkCheck,DualAtkSelected) 
  
  UM_Seize
UM_Arrive_Definition:
  UM_Exit //dummy
UM_Attack_Definition:
  UM_Attack
  UM_Attack_B
  UM_Ride
  UM_Exit
UM_BMagic_Definition:
  UM_Attack
UM_WMagic_Definition:
  UM_Staff
  UM_Play
  UM_Dance
  UM_Steal
  UM_Summon
  UM_Summon_DK
  UM_Talk
  UM_Support
  UM_Visit
  UM_Pick
  UM_Chest
  UM_Door
  UM_Armory
  UM_Vendor
  UM_Secret
UM_Mila_Definition:
  UM_Exit //dummy
UM_Shove_Definition:
  UM_Exit //dummy
UM_Smite_Definition:
  UM_Exit //dummy
UM_Pivot_Definition:
  UM_Exit //dummy
UM_Reposition_Definition:
  UM_Exit //dummy
UM_Swap_Definition:
  UM_Exit //dummy
UM_Rescue_Definition:
  UM_Rescue
  UM_Give
UM_Take_Definition:
  UM_Take
  UM_Drop

  UM_Item
  UM_Trade
  UM_Supply
  //MenuCommand(0x68F,0x6D5,GreenText,NewSupplyUsability,0x23FB8)
  
  UM_Wait

  UM_Separator 

#endif // HAX_ACTION_APPLICATION_REWORK_EVENT