#include "Extensions/AI Assembly.txt"
#include "SummonRework/SummonReworkInstaller.event"

/*
#define Phantom GhostFighter
#define Lyon LyonCC
ALIGN 4
SummonTable:
BYTE Ewan 0x3F Phantom 0
BYTE Knoll 0x3E Phantom 0
BYTE Lyon 0x3B Phantom 0
BYTE ONeill 0x3F Phantom 0
BYTE 0 0 0 0 //terminator
*/

#define UnconditionalGoto(label) "BYTE $03 $00 $FF label; WORD 0 0 0"
//#define SummonTable 0x95F5A4 

AI1PointerTable(0x14, EnemySummonAI)  //change first value to change what ID this gets installed to, by default overwrites vanilla summon AI

EnemySummonAI:
Routine_AI(CheckIfCanSummon|1, 0)  //calls function to check if unit is on the summon table, returns either true or false to I guess 0x0203AA8A?
ConditionalGoto_Memory(0, EQ, 5, 0x02020188) //if can't summon, attack
Routine_AI(DoTheSummoning|1, 0) //checks to summon a unit to 1 of 8 tiles surrounding this unit as long as they are not occupied, if they are all occupied then returns false to ai register address else doesn't touch that address so it remains as true from the last function; doesn't actually summon
Nop
//UnconditionalGoto(0)
Label(5)
ActionWithoutMoving
Nop
//UnconditionalGoto(0)


ALIGN 4
CheckIfCanSummon:
#incbin "CheckIfCanSummon.dmp"
POIN SummonTable

ALIGN 4 
DoTheSummoning:
#incbin "DoTheSummoning.dmp"
POIN SummonTable
//POIN SummonEvent

MESSAGE CheckIfCanSummon
MESSAGE DoTheSummoning

//in theory all I need to do is have it do 0x807AD1C in case of this being set


PUSH
ORG 0x3A55C
//POIN 0x7AD1D
POP


/*
SummonTable:
//BYTE SummoningCharacter SummonedCharacter SummonedClass SummonedLevel SummonedItem 
BYTE ONeill 129 Revenant 10 RottenClaw
BYTE 0 0 0 0 0


MESSAGE Unit data at currentOffset
UNIT 0x10 0x20 0 Level(0x30,Enemy,1) [4,5] 0x0 0x0 0x0 0x0 [0x60] NoAI
UNIT
BYTE 0x70

ALIGN 4
SummonEvent:
LOAD1 0x1 0x02020188
ENUN
NoFade
ENDA

//unitID classID 00 level*8+5 00 04 00 00 00 00 00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*/
