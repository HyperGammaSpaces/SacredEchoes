PUSH
	//Target selection changes
	ORG $28FAC 		//Entrap Staff
	EntrapStaffP4Jump:
		SHORT $4900
		B(RescueStaff_CallTargetingFunc)
		POIN EntrapStaff_RangeSetup|1
	RewarpStaffP4Jump:
		SHORT $4900
		B(RescueStaff_CallTargetingFunc)
		POIN RewarpStaff_RangeSetup|1
	RescueStaffP4Jump:
		SHORT $4902 
	RescueStaff_CallTargetingFunc:
		SHORT $1C28	//mov r0, r5
		SHORT $1C22	//mov r2, r4
		BL($29568)
		B(P4Ladder_End)
		POIN RescueStaff_RangeSetup|1
	RestoreStaffP4Jump:
		SHORT $4902 $1C28 $1C22
		BL($29BC8)
		B(P4Ladder_End)
		POIN RestoreStaff_RangeSetup|1
	SilenceStaffP4Jump:
		SHORT $4900
		B(StatusStaff_CallTargetingFunc)
		POIN SilenceStaff_RangeSetup|1
	FreezeStaffP4Jump:
		SHORT $4902
	StatusStaff_CallTargetingFunc:
		SHORT $1C28	//mov r0, r5
		SHORT $1C22	//mov r2, r4
		BL($29CA0)  //TargetSelectionForOffensiveStaff
		B(P4Ladder_End)
		POIN SleepStaff_RangeSetup|1
	UnlockStaffP4Jump:
		SHORT $4901 $4A02 $1C23 
		B(TileTargetingFuncJump)
		POIN Unlock_Jump|1
		WORD 0x87A	//target select help text
	WarpStaffP4Jump:
		SHORT $1C28	//mov r0, r5
		BL($2987C)	//SetupWarpTargetSelection
		B(P4Ladder_End)
	InvokeStaffP4Jump:
		SHORT $1C28
		BL(InvokeOnSelect)
		B(P4Ladder_End)
	FortifyStaffP4Jump:
		SHORT $1C28 //mov r0, r5
		BL($2951C)	//EndItemEffectSelectionThing
		B(P4Ladder_End)
	MineP4Jump:
		SHORT $4901
		SHORT $4A02
		B(TileTargetingFuncJump)
		ALIGN 4
		POIN $264F0+1
		WORD 0x87D
	LightRuneP4Jump:
		SHORT $4902
		SHORT $4A03
		TileTargetingFuncJump:
		SHORT $1C28
		BL($298F0)	//PrepareTargetSelectionForMineAndLightRune
		B(P4Ladder_End)
		POIN $26580+1
		WORD 0x87E
	TorchStaffP4Jump:
		SHORT $1C28	//mov r0, r5
		BL($29ED8)	//NewTorchStaffSelection
		B(P4Ladder_End)
	AnewP4Jump:
		SHORT $4902
		SHORT $1C28
		SHORT $1C22
		BL($295A8)	//SetupTargetSelectionForGenericStaff
		B(P4Ladder_End)
		POIN AnewStaff_RangeSetup|1
		WORD 0x870
	NoTargetRoutineP4Jump:
		SHORT $1C28
		BL($29544)
	P4Ladder_End:
		SHORT $BC30 $BC01 $4700 //pop r4-r5 and bx r0
		
	//Moving around some use pointers
	ORG $28E8C					//first entry (heal)
	ItemTargetSelectionCases:
	POIN $28F94					//heal
	POIN FortifyStaffP4Jump		//expel
	POIN $28F94					//recover
	POIN $28F9C					//physic
	POIN FortifyStaffP4Jump
	POIN RestoreStaffP4Jump
	POIN SilenceStaffP4Jump
	POIN FreezeStaffP4Jump
	POIN EntrapStaffP4Jump
	POIN WarpStaffP4Jump 
	POIN RescueStaffP4Jump
	POIN TorchStaffP4Jump 
	POIN InvokeStaffP4Jump 
	POIN UnlockStaffP4Jump
	POIN RescueStaffP4Jump		//rewarp
	POIN AnewP4Jump			 	//new (5A) anew
	
	ORG $28F90					//old (8C) anew
	POIN FortifyStaffP4Jump
	
	
	
	//Actual function changes below
	
	//Show heal amount
	ORG $24670
	SHORT $4B00 $469F
	POIN ShowHealAmount
	
	//Heal by item might
	ORG $16FB8
	HealByMight:
	#incbin "HealByMight.dmp"

	//2f010 - status staves func
	ORG $2F050
	jumpToHack(Status_Staff_HP)
	
	//624D4 - Silence - start EFXHpBar - not working yet
	ORG $624D4
	jumpToHack(SilenceFix)
	
	//62768 - Sleep - startEFXHpBar - not working yet
	ORG $62768
	jumpToHack(SleepFix)
	
	//Torch - 2FB88
	ORG $2FB88
	SHORT $B570 //push {r4-r6, r14}
	ORG $2FB94
	jumpToHack(TorchFix)
	ORG $2FBB0
	SHORT $BC70 //pop {r4-r6}
	
	//Unlock - make it work on chests too
	ORG $28B3C	//Unlock usability check
		New_Use(UnlockStaff_RangeSetup)
	ORG $26080
	Unlock_Jump:
		SHORT 0xB500 0x1C1A 0x4902	//push {lr}; mov r2, r3; ldr r1,=POIN;
		BL($D18C4)	//bl to bx r1
		SHORT 0xBC01 0x4700 0x0
		POIN UnlockStaff_RangeSetup|1
	
	//Unlock Effect - 2f274 - edit this to deplete HP
	ORG $2F274
	SHORT $B570 //push {r4-r6, r14}
	ORG $2F280
	jumpToHack(UnlockFix)
	ORG $2F2A4
	SHORT $BC70 //pop {r4-r6}
	
	//Fix warp target selection
	ORG $59BA14
	POIN NewWarpTargetSelectCancel+1

	ORG $59B9EC
	POIN NewWarpTargetSelectConfirm+1
	
	//Mess with rescue staff
	ORG $295A0
	POIN NewRescueSelectFunc+1
	
	//Entrap - replace Berserk
	ORG $28B0C	//Entrap
		New_Use(EntrapStaff_RangeSetup)
	ORG $26198
	EntrapTargetRoutine:
	#incbin "entraptarget.dmp"

	ORG $2FCB0 //entrap effect pointer
	POIN $2FE94 //rescue effect
	
	//Rewarp
	//This has to be in BL range
	ORG $28ADC
	RewarpUsabilityCheck:
		New_Use(RewarpStaff_RangeSetup)
	ORG $2FE9C
	RewarpEffectCheck:
		SHORT $1C30	//mov r0, r6
		BL(RewarpEffect)
		B($2FF76)
	ORG $2EC8C
	RewarpEffect:
		replaceWithHack(Rewarp_Setup)
	//Repoint usability table entry
	ORG $288E8
	POIN RewarpUsabilityCheck
	//Effect table entry
	ORG $2FCC8
	POIN RewarpEffectCheck
	
	//Anew
	ORG $295A8
		BL($D18C4)
		SHORT $480A $6800 $2101 $4249
		BL($197E4)
		SHORT $4808 $4909
		BL($4FAA4)
		SHORT $1C04 $4808
		BL($A240)
		SHORT $1C01 $1C20
		BL($35708)
		SHORT $BC30 $BC01 $4700
		ALIGN 4
		WORD $202e4e0 $859d2f8 $8029551 $870
	ORG $28B98
	AnewUsabilityCheck:
		New_Use(AnewStaff_RangeSetup)
	ORG $2FF68
	AnewEffectCheck:
		SHORT $1C30
		BL($2FBBC)
		B($2FF76)
	ORG $2FBBC
	AnewEffect:
		#incbin "AnewSetup.dmp"
		WORD SelectedSpellPointer
	//New usability table entry (5A)
	ORG $288EC
	POIN AnewUsabilityCheck
	//New effect table entry	(5A)
	ORG $2FCCC
	POIN AnewEffectCheck
	
	
	
	
	//2f1d8 some nightmare stuff
	
	//Expel stuff
	//Repoint old Mend to new Expel function, which replaces the Mine
	ORG $288B4
	POIN $28BA8
	
	//Repoint old Mine usability check with Expel usability check
	//This has to be in BL range
	ORG $28BA8
	ExpelUsabilityCheck:
		New_Use(ExpelStaff_RangeSetup)
	
	//Moved these up to the big target select rework
	//Expel P4 (Target Selection)
	//ORG $28E90
	//POIN $0802901C 
	
	//ORG $2901C //Mine Range Setup - mimic Fortify here. It just goes to 2951c
	//SHORT $1C28 //mov r0, r5
	//BL($2951C)
	//B(P4Ladder_End)
	
	//Expel P1 (Use Effect)
	ORG $2FC94
	POIN $2FF50 //mine jump
	
	//Expel Exec (WIP)
	ORG $2FA4C
	//Just push lr and bx to hack in R3
	SHORT $B500
	SHORT $46C0 //nop
	callHack_r3(ExecuteExpelStaff)
	SHORT $BC01
	SHORT $4700
	
	//SHORT $B5F0 //push {r4-r7, lr}
	//SHORT $46C0
	//jumpToHack(ExecuteExpelStaff)
	
	ORG $2FA82 //End of old Mine
	SHORT $BCF0 //pop {r4-r7}
	
	//Make Silque able to summon for testing
	ORG $95F5A4
	BYTE Silque
	
	//Change usability routine for Invoke
	ORG $28B2C	//Invoke
		New_Use(InvokeStaff_RangeSetup)
		
	ORG $299BA; BL(Invoke_Jump)
	
	
	
	
	//08029a08 HammerneTargetSelection_OnChange - nop out 29a20
	ORG $29A1C
	WORD 0
	WORD 0
	
	//08029a2c HammerneTargetSelection_OnInit - just nop this out
	ORG $29A2E
	SHORT 0
	SHORT 0
	
	//59D3B8
	//08029944 HammerneTargetSelection_OnSelect
	
	//080299b8 SetupHammerneUseSelection
	
	//2f2b4 - replace with InvokeOnSelect
	//2900E - change to a BL to 2951c
	
	ORG $29944
	InvokeOnSelect:
	#incbin "InvokeOnSelect.dmp"
	
	ORG $2F2B4
	SHORT $B570 $BC70 $BC01 $4700 //does nothing
	
	//Invoke P4
	//ORG $2900E
	//BL(InvokeOnSelect)
	
	ORG $262A8
	Invoke_Jump:
		SHORT 0xB500 0x1C22 0x4902
		BL($D18C4)
		SHORT 0xBC01 0x4700 0x0
		POIN InvokeStaff_RangeSetup|1
	
	
	ORG $7AD1C
	#incbin "DoInvoke.dmp"
	POIN SummonTable
	
	//Switch Summon proc to DKSummon proc
	ORG $7B794
	WORD $089A33C0
	
	//Specify Invoke, Rewarp, Entrap and Expel as non-healing staves
	//Expel
	ORG $72598
	POIN $726A4
	//Entrap
	ORG $725B4
	POIN $726A4
	//Invoke
	ORG $725C4
	POIN $726A4
	//Rewarp
	ORG $725CC
	POIN $726A4
	
	/*
	Don't draw portrait on item select menu if unit is generic
	
	change these from this:
	08022BE8 6848   LDR r0, [r1, #0x4] r1=Unit
	08022BEA 7900   LDRB r0, [r0, #0x4]
	08022BEC 2851   CMP r0, #0x51
	
	to this:
	08022BE8 6808   LDR r0, [r1, #0x0] r1=Unit
	08022BEA 88C0   LDRH r0, [r0, #0x6]
	08022BEC 2800   CMP r0, #0x0
	*/
	
	//Don't draw portrait on item select menu if unit is generic
	ORG $22BE8
	SHORT $6808 $88C0 $2800
	
	//Remove hardcoded checks for phantom class - use 0x3F as summon unit ID
	ORG $18EDA
	SHORT $6810 $7900 $283F
	ORG $23046
	SHORT $6811 $7909 $1C04 $293F
	ORG $232C8
	SHORT $6810 $7900 $283F
	ORG $23F74
	SHORT $6800 $7900 $283F
	ORG $23FDE
	SHORT $6810 $7900 $283F
	ORG $2403A
	SHORT $6810 $7900 $283F
	ORG $24096
	SHORT $6810 $7900 $283F
	ORG $2523A
	SHORT $6810 $7900 $283F
	ORG $25242
	SHORT $6823 $7918 $283F
	ORG $2C524
	SHORT $6818 $7900 $283F
	ORG $3122A
	SHORT $6808 $7900 $283F
	
	//Update Trade command to block summoned units
	ORG $22F38
	jumpToHack(NewTradeUsability)
	ORG $25518
	jumpToHack(NewGiveToEligibility)
	
	//don't let summons rescue/take
	ORG UM_Rescue_Definition+0xC
	//ORG $59CD34
	POIN NewRescueMenuUsability|1
	//ORG $59CD7C
	ORG UM_Take_Definition+0xC
	POIN NewTakeUsability|1
	
	//Change DKSummon to use Summon Rework
	ORG $9A33CC
	POIN StartMultiSummon|1
	ORG $9A33EC
	POIN NewMultiSummon|1
	ORG $9A341C
	POIN NewMultiSummon|1
	ORG $9A344C
	POIN NewMultiSummon|1
	ORG $9A347C
	POIN NewMultiSummon|1
	ORG $7AFFC
	replaceWithHack(NewGetRAMSlot)
	
	ORG $7B1C0
	#incbin "NewHandleSummonBatch.dmp"
	
	ORG $7B090
	#incbin "NewGetSummonPositions.dmp"
	
	//Bring summons closer
	ORG $7B23E
	BYTE $01
	ORG $7B25A
	BYTE $01
	ORG $7B27A
	BYTE $01
	ORG $7B29E
	BYTE $01

POP
//Healing staves
ALIGN 4
ShowHealAmount:
#incbin "ShowHealAmount.dmp"
WORD HP_Restore_Arrow
WORD SelectedSpellPointer

//Status staves
ALIGN 4
Status_Staff_HP:
#incbin "status_staff_hp.dmp"
POIN SpellCostGetter
ALIGN 4

SilenceFix:
#incbin "silencefix.dmp"
ALIGN 4
SleepFix:
#incbin "sleepfix.dmp"
ALIGN 4

//Torch
TorchFix:
#incbin "torchfix.dmp"
WORD SelectedSpellPointer
POIN SpellCostGetter
ALIGN 4

//Unlock
UnlockStaff_RangeSetup:
	rfItemRangeSetup(TryAddToUnlockTargetList+1,Item_TTRange)
ALIGN 4

TryAddToUnlockTargetList:
#incbin "TryAddToUnlockTargetList.dmp"
ALIGN 4

UnlockFix:
#incbin "unlockfix.dmp"
WORD SelectedSpellPointer
POIN SpellCostGetter
ALIGN 4

UnlockEffectFix: //formerly at 7e79c
#incbin "unlockeffect.dmp"
ALIGN 4

//Entrap
EntrapStaff_RangeSetup:
	rfItemRangeSetup(0x26199,Item_TURange)

//Rewarp
RewarpStaff_RangeSetup:
	rfItemRangeSetup(TryAddUnitToRewarpTargetList+1,Item_TURange)
ALIGN 4
TryAddUnitToRewarpTargetList:
#incbin "RewarpUsabilityCheck.dmp"
ALIGN 4
Rewarp_Setup:
#incbin "rewarpsetup.dmp"
WORD SelectedSpellPointer
ALIGN 4
//need to make new map anim proc

RewarpMapAnimProc: //formerly at $089A5214
SHORT $2; SHORT $0; 	POIN MapAnim_SubjectUnitWarpRing+1	//Call Routine [ASM:0x8081B71 MapAnim_TargetUnitWarpRing]
SHORT $E; SHORT $A; 	WORD $0	//Sleep for 10 frames
SHORT $2; SHORT $0; 	POIN MapAnim_SubjectUnitFlashOut+1	//Call Routine [ASM:0x8081CD5 MapAnim_TargetUnitFlashOut]
SHORT $E; SHORT $14; 	WORD $0	//Sleep for 20 frames
SHORT $2; SHORT $0; 	POIN MapAnim_SubjectStarExplosion+1	//Call Routine [ASM:0x8081D41 MapAnim_TargetStarExplosion]
SHORT $E; SHORT $2; 	WORD $0 //Sleep for 2 frames
SHORT $2; SHORT $0; 	POIN MapAnim_SubjectHide+1	//Call Routine [ASM:0x8081D1D MapAnim_TargetHide]
SHORT $E; SHORT $8; 	WORD $0	//Sleep for 8 frames
SHORT $2; SHORT $0; 	POIN MapAnim_MoveSubjectForWarp+1	//Call Routine [ASM:0x8081E05 MapAnim_MoveTargetForWarp]
SHORT $E; SHORT $1E; 	WORD $0 //Sleep for 30 frames
SHORT $2; SHORT $0; 	POIN MapAnim_MoveCameraOnWarpSubject+1	//Call Routine [ASM:0x80815ED MapAnim_MoveCameraOnWarpTarget]
SHORT $E; SHORT $2; 	WORD $0	//Sleep for 2 frames
SHORT $2; SHORT $0; 	POIN MapAnim_SubjectStarImplosion+1	//Call Routine [ASM:0x8081D85 MapAnim_TargetStarImplosion]
SHORT $E; SHORT $28; 	WORD $0	//Sleep for 40 frames
SHORT $2; SHORT $0; 	POIN MapAnim_WarpSubjectWarpRing+1	//Call Routine [ASM:0x8081BCD MapAnim_WarpTargetWarpRing]
SHORT $E; SHORT $A; 	WORD $0	//Sleep for 10 frames
SHORT $2; SHORT $0; 	POIN MapAnim_SubjectShow+1	//Call Routine [ASM:0x8081DE1 MapAnim_TargetShow]
SHORT $2; SHORT $0; 	POIN MapAnim_SubjectUnitFlashIn+1	//Call Routine [ASM:0x8081CF9 MapAnim_TargetUnitFlashIn]
SHORT $E; SHORT $10; 	WORD $0	//Sleep for 16 frames
SHORT $E; SHORT $A; 	WORD $0	//Sleep for 10 frames
SHORT $2; SHORT $0; 	POIN ClearBattleChangeData+1	//Call Routine [ClearBattleChangeData]
SHORT $E; SHORT $1E; 	WORD $0	//Sleep for 30 frames
WORD $0; WORD $0	//End (Deletes Self)

MapAnim_SubjectUnitWarpRing:
#incbin "RewarpProc/MapAnim_SubjectUnitWarpRing.dmp"
ALIGN 4
MapAnim_SubjectUnitFlashOut:
#incbin "RewarpProc/MapAnim_SubjectUnitFlashOut.dmp"
ALIGN 4
MapAnim_SubjectStarExplosion:
#incbin "RewarpProc/MapAnim_SubjectStarExplosion.dmp"
ALIGN 4
MapAnim_SubjectHide:
#incbin "RewarpProc/MapAnim_SubjectHide.dmp"
ALIGN 4
MapAnim_MoveSubjectForWarp:
#incbin "RewarpProc/MapAnim_MoveSubjectForWarp.dmp"
ALIGN 4
MapAnim_MoveCameraOnWarpSubject:
#incbin "RewarpProc/MapAnim_MoveCameraOnWarpSubject.dmp"
ALIGN 4
MapAnim_SubjectStarImplosion:
#incbin "RewarpProc/MapAnim_SubjectStarImplosion.dmp"
ALIGN 4
MapAnim_WarpSubjectWarpRing:
#incbin "RewarpProc/MapAnim_WarpSubjectWarpRing.dmp"
ALIGN 4
MapAnim_SubjectShow:
#incbin "RewarpProc/MapAnim_SubjectShow.dmp"
ALIGN 4
MapAnim_SubjectUnitFlashIn:
#incbin "RewarpProc/MapAnim_SubjectUnitFlashIn.dmp"
ALIGN 4
ClearBattleChangeData:
#incbin "RewarpProc/MapAnim_ClearCoords.dmp"
ALIGN 4

//Anew
AnewStaff_RangeSetup:
	rfItemRangeSetup($25B18+1,Item_TURange)
ALIGN 4

//21b30 -in map anim dance proc - needed?
//replace 089A5008 with 08021b31?

//can probably use the anim from hammerne?
//23194 - dance command usability (puts item 0xA5 in gItemGotButNotYet)
//230f0 - dance command actual usability (checks for dance ability, target list size, if any dancer rings are in the inventory)
//25b6c - setup target list for dance
//25b18 - try add target for dance
//231d0 - dance command effect
//24af0 - setup target selection menu for dance
//32358 - action dance

//7b7f0 is something to do with dancer map anims

//Expel stuff

ExpelStaff_RangeSetup:
	rfItemRangeSetup(TryAddUnitToExpelTargetList+1,Item_TURange)
ALIGN 4
TryAddUnitToExpelTargetList:
#incbin "ExpelUsabilityCheck.dmp"
ALIGN 4

//If it's short enough i'm just going to incbin it since it's just wrapping a ForEach. Func is at $2FA4C.
//This will need to "for each in range" check if unit is Monster Type, roll d100, if <65 then reduce unit's HP to 0. No need to select a target.
	
Target_Routine_For_Expel: //push r14; ldrb r1,[r4,#0x12]; lsl r1,r1,#0x1; add r1,#0x1E; add r1,r1,r0; ldrh r2,[r1]; bl somewhere; pop r0; bx r0 (r4+0x12 has inventory slot, r0 has char data)
//Modify to check spell index.
SHORT 0xB500 0x7CA1 0x0049 0x311E 0x1809 
//SHORT 0x880A
SHORT $224C //mov r2, #0x4c
BL(ExpelStaff_RangeSetup)
SHORT 0xBC01 0x4700

ExecuteExpelStaff:
#incbin "ExecExpel.dmp"
POIN Target_Routine_For_Expel
WORD SelectedSpellPointer
POIN ExpelEffectProc
POIN SpellCostGetter
ALIGN 4

ExpelMapAnimProc:
SHORT $2; SHORT $0;  POIN $30C24+1 //init. We need to set a proc field to 0
SHORT $2; SHORT $0;  POIN $81E48+1 //Darkens map? Wraps 7f568
SHORT $E; SHORT $1;  WORD $0 //sleep 1 frame
SHORT $2; SHORT $0;  POIN $81278+1 //MapAnim_AnimateSubjectIdle. Moves staff user.
SHORT $E; SHORT $1E; WORD $0 //sleep 30 frames

SHORT $2; SHORT $0;  POIN $819E8+1 //jumps to 7d0b4 - displays the circles

SHORT $E; SHORT $2;  WORD $0 //sleep 2 frames
SHORT $E; SHORT $C8; WORD $0 //sleep 200 frames
SHORT $E; SHORT $A;  WORD $0 //sleep 10 frames
SHORT $2; SHORT $0;  POIN $8129C+1 //MapAnim_SubjectResetAnim. Returns staff user to idle anim.
SHORT $E; SHORT $1E; WORD $0 //sleep 30 frames
SHORT $2; SHORT $0;  POIN $81E54+1 //Un-darkens map? Wraps 7f5c8
SHORT $E; SHORT $1;  WORD $0 //sleep 1 frame
SHORT $2; SHORT $0;  POIN $30C40+1 //LoadTitleAnimations2Only
WORD $0; WORD $0 //end proc

ExpelEffectProc:
SHORT $E; SHORT $1;  WORD $0 //sleep 1 frame
SHORT $2; SHORT $0;  POIN $2CC1C+1 //SaveInstigatorFromBattle
SHORT $E; SHORT $1;  WORD $0 //sleep 1 frame

SHORT $2; SHORT $0;  POIN ExpelLoopInit+1 //its dying here.

SHORT $B; SHORT $0;  WORD $0 //set label 0
SHORT $2; SHORT $0;  POIN ExpelCheckLoopVariables+1 //handles "if target list empty goto 1"
SHORT $2; SHORT $0;  POIN $35ED8+1 //puts camera on current target
SHORT $E; SHORT $0;  WORD $0 //sleep 0 frame
SHORT $2; SHORT $0;  POIN ExpelEffectFunc+1
SHORT $E; SHORT $0;  WORD $0 //sleep 0 frame
SHORT $2; SHORT $0;  POIN $35F40+1 //resets unit motion

SHORT $B; SHORT $1;  WORD $0 //set label 1
SHORT $2; SHORT $0;  POIN $3601C+1 //does some cleanup idk
SHORT $E; SHORT $0;  WORD $0 //sleep 0 frame
SHORT $C; SHORT $0;  WORD $0 //goto label 0
WORD $0; WORD $0 //end proc


ExpelLoopInit:
#incbin "ExpelLoopInit.dmp"
POIN Target_Routine_For_Expel
ALIGN 4

ExpelCheckLoopVariables:
#incbin "ExpelCheckLoopVariables.dmp"
POIN Target_Routine_For_Expel
ALIGN 4

ExpelEffectFunc:
#incbin "ExpelEffectFunc.dmp"
POIN Target_Routine_For_Expel
ALIGN 4

//Invoke stuff

StartMultiSummon:
#incbin "StartMultiSummon.dmp"
ALIGN 4

NewGetRAMSlot:
#incbin "NewGetRAMSlot.dmp"
ALIGN 4

NewRescueMenuUsability:
#incbin "NewRescueUsability.dmp"
ALIGN 4

NewTakeUsability:
#incbin "NewTakeUsability.dmp"
ALIGN 4

NewGiveToEligibility:
#incbin "GivenToUsability.dmp"
ALIGN 4

NewTradeUsability:
#incbin "TradeUsability.dmp"
ALIGN 4

NewMultiSummon:
#incbin "DoInvokeMulti.dmp"
POIN SummonTable
ALIGN 4

NewWarpTargetSelectCancel:
#incbin "NewWarpTargetSelectCancel.dmp"
WORD SelectedSpellPointer
ALIGN 4

NewWarpTargetSelectConfirm:
#incbin "warppositionconfirm.dmp"
ALIGN 4

NewRescueSelectFunc:
#incbin "rescueeffect.dmp"
WORD SelectedSpellPointer
POIN SpellCostGetter+1
ALIGN 4

InvokeStaff_RangeSetup:
	SHORT 0xB500 0x4903		//load usability routine
	SHORT 0x4803 0x6800		//Load unitID into r0
	BL(Item_TTRange)		//Check tiles in range
	SHORT 0xBC08 0x4718		//pop and exit
	POIN (0x25C34 | 1)		//Usability routine
	WORD 0x03004E50			//unit pointer
ALIGN 4

SummonTable:
BYTE Silque 	0x3F 	DreadFighter 	0
BYTE Tatiana 	0x3F 	PegasusKnight 	0
BYTE Genny 		0x3F 	Soldier 		0
BYTE 0x8F 		0xAA 	Revenant 		0			//some generic enemy
BYTE 0 			0 		0 				0

//For Invoke: range 1-3, need to use Summon functions and increase the number of squares used to 8. Use RN to select a number between [Level/4+1] and 8 to determine number of summons, capped by [eligible clean squares]. 24 squares available from 1-3

/*

you could make them generics, find out why they are teleporting, stop that, keep track of them in their support data
they aren't going to be using that
you can store like
an internal ID for the phantom in there
and who summoned them

[ ][ ][ ][1][ ][ ][ ]
[ ][ ][2][3][4][ ][ ]
[ ][5][6][7][8][9][ ]
[A][B][C][U][D][E][F]
[ ][0][1][2][3][4][ ]
[ ][ ][5][6][7][ ][ ]
[ ][ ][ ][8][ ][ ][ ]
*/

//For Expel: MAG/2 range, 65 hit, make target list from all enemies in range which are MonsterType, grant exp for killing strongest monster hit
