//FE8 Staff Range Fix
//By Tequila/Lord Reyson/Teraspark

#include EAstdlib.event
#include "Extensions/Hack Installation.txt"
	
#ifdef _FE8_
	#define Teraspark_Range_Fixes $1
    
    #define TargetSelectionStruct(constructor, destructor, onChange, onSelect, onCancel) "POIN constructor|1 destructor|1; WORD 0; POIN onChange|1; WORD 0; POIN onSelect|1 onCancel|1; WORD 0"
    
    #define TS_OnChange_Generic $24884
    #define TS_OnCancel_Generic $22748
    #define TS_Destructor_Generic $4E884

    /*
    //sample
    InvokeTargetSelectionStruct:
    POIN $24868|1   //constructor
    POIN $4E884|1   //destructor
    WORD 0          //unknown1
    POIN $24884|1   //OnChange
    WORD 0          //unknown2
    POIN $244D8|1   //OnSelect
    POIN $22748|1   //OnCancel
    WORD 0          //OnRtext
    
    Constructor: just spawns a BottomHelpText
    Destructor: just clears some background layers
    OnChange: this points to a nullsub here
    OnSelect: stores unit action type and coords
    OnCancel: calls GenericSelection_BackToUM
    */
    
	#include "RangeFixDefs.event"
	#include "ItemTargeting/_ItemEffectTargeting.event"
	#include "StaffAI/_StaffAI_Setup.event"
    
	PUSH
	//USABILITY
	ORG $28A8C	//Heal/Mend/Recover
		New_Use(HealStaff_RangeSetup)
	ORG $28A9C	//Physic
		New_Use(HealStaff_RangeSetup)
	ORG $28AAC	//Fortify
		New_Use(HealStaff_RangeSetup)
	ORG $28ABC	//Restore
		New_Use(RestoreStaff_RangeSetup)
	ORG $28ACC	//Rescue
		New_Use(RescueStaff_RangeSetup)
    //Rewarp
    ORG $28AEC	//Silence
		New_Use(SilenceStaff_RangeSetup)
	ORG $28AFC	//Sleep
		New_Use(SleepStaff_RangeSetup)
    //Entrap
	ORG $28B1C	//Warp
		New_Use(WarpStaff_RangeSetup)
	ORG $28B3C	//Unlock usability check
		//New_Use(UnlockStaff_RangeSetup)
	ORG $28BC8	//Torch
		SHORT $1C20 $1C29 $4A01
		BL($D18C8)	//bl to bx r2
		B($28C06)
		POIN Torch_Fix|1
	ORG $28B2C	//Hammerne
		New_Use(HammerneStaff_RangeSetup)
	
	//TARGET
	ORG $28F98	//Heal/Mend/Recover Staff
		POIN HealStaff_RangeSetup|1
	ORG $28F9E	//Physic Staff
		SHORT $1C28 $1C22
		BL($29B8C)
		B($29062)
		POIN HealStaff_RangeSetup|1
	ORG $28FBC	//Restore Staff
		SHORT $4902 $1C28 $1C22
		BL($29BC8)
		B($29062)
		POIN RestoreStaff_RangeSetup|1
	ORG $28FD0	//Silence Staff
		POIN SilenceStaff_RangeSetup|1
	ORG $28FD8	//Sleep Staff
		POIN SleepStaff_RangeSetup|1
	ORG $28FDC	//Berserk Staff
		SHORT $4902 $1C28 $1C22
		BL($29CA0)
		B($29062)
		POIN SleepStaff_RangeSetup|1
	//ORG $29004	//Warp Staff //
	ORG $28FAC	//Rescue Staff
		SHORT $4902 $1C28 $1C22
		BL($29568)
		B($29062)
		POIN RescueStaff_RangeSetup|1
	
	//killing off some of the now useless routines and using the space for jumps
	ORG $2606C
	Barrier_Jump:
		SHORT $B500 $1C22 $4902	//push {lr}; mov r2, r4, ldr r1,=POIN;
		BL($D18C4)
		SHORT $BC01 $4700 $0	//pop{r0}; bx r0
		POIN BarrierStaff_RangeSetup|1
    ORG $26080
	//Unlock_Jump:
		SHORT $B500 $1C1A $4902	//push {lr}; mov r2, r3; ldr r1,=POIN;
		BL($D18C4)	//bl to bx r1
		SHORT $BC01 $4700 $0
		//POIN UnlockStaff_RangeSetup|1
        POIN $24884|1 //nullsub
    ORG $26294
	Warp_Jump:
		SHORT $B500 $1C22 $4902
		BL($D18C4)
		SHORT $BC01 $4700 $0
		POIN WarpStaff_RangeSetup|1
	Hammerne_Jump:
		SHORT $B500 $1C22 $4902
		BL($D18C4)
		SHORT $BC01 $4700 $0
		POIN HammerneStaff_RangeSetup|1
    DancerRingTargetSelect:
		SHORT $B500 $1C0B
		SHORT $4902 $4A03
		BL($295A8)
		SHORT $BC01 $4700
		POIN DancerRingJump|1
		WORD $87F //target select help text
	DancerRingJump:
		SHORT $B500 $1C22 $4902
		BL($D18C4)
		SHORT $BC01 $4700 $0
		POIN DancerRing_RangeSetup|1
	
	/*
	//Shouldn't have to touch these
	#define New_Use(item) "ORG Usability_Table+4*(item-$4B); POIN $28A8C"
	#define New_Target(offset) "ORG offset; POIN Target_Routine_For_Non_Unlock|1"
	#define LL_Entry(staff, pointer) "WORD staff; POIN pointer"
	//###### USABILITY TABLE ######
	//Repoint staffs (except Unlock/Torch) to go to the same place, in this case, the heal routine
	New_Use(Physic)
	New_Use(Fortify)
	New_Use(Restore)
	New_Use(Silence)
	New_Use(Sleep)
	New_Use(Berserk)
	New_Use(Warp)
	New_Use(Rescue)
	New_Use(Hammerne)
	New_Use(Barrier)
	
	//####### TARGET TABLE #######
	//Can't do the same thing here that we did with the usability table because they don't all branch to the same place
	New_Target($28F98) 	//Heal/Mend/Recover
	New_Target($28FA8)	//Physic
	New_Target($28FC8)	//Restore
	New_Target($28FD0)	//Silence
	New_Target($28FD8)	//Sleep
	New_Target($28FE8)	//Berserk
	New_Target($28FB8)	//Rescue
	
	//For the special snowflakes
	ORG $28FFC //Unlock
	POIN Target_Routine_For_Unlock|1
	ORG $29C36 //Barrier
	BL(Non_Unlock_Jump)
	ORG $299BA //Hammerne
	BL(Non_Unlock_Jump)
	ORG $2987E //Warp
	BL(Non_Unlock_Jump)
    */
    
	ORG $2F178 //UBER-SPECIAL-SNOWFLAKE Fortify
	BL(Fortify_Jump)
    
	//####### HIGHLIGHTED SQUARES #######
	
	//Fix my ballista issues the lazy way (instead of not passing in bool via r12, just make range function not use r12)
	ORG $1AAC6
	SHORT $B082
	ORG $1AB12
	SHORT $9001
	ORG $1AB16
	SHORT $9901
	ORG $1AB56
	SHORT $9201
	ORG $1AB6E
	SHORT $9A01
	ORG $1ABA6
	SHORT $B002
	
	//NEW Bowrange AI fixes
	ORG $3AC6A
	BL(GetItemRangeM_AIJump)
	
	ORG $3D8A4
	BL(GetItemRangeM_AIJump)
	SHORT $1C03 $1C0C
	B($3D8BA)
	
	ORG $34554 //Dunno when this is called, or even why it exists, but I'm putting it here just in case. 
	SHORT $4B01
	BL($D18CC)	//bl to bx r3
	SHORT $E01A
	POIN Unknown_Function|1
	
	ORG $1B9AE //Gets called a bunch of times; mag/2 weapons don't work here, so I need a fix
	SHORT $46C0
	gotoHackWithR3(Weapon_Attack)
	SHORT $46C0
	
	ORG $1CBFA //When first selecting a unit, for staffs
	BL(All_Staffs_All_Squares)
	
	ORG $1CC0A //When first selecting a unit, for weapons
	BL(All_Weapons_All_Squares)
	
	ORG $22C7C //After moving to a specific square, for weapons - also MagicUMCommandHover
	gotoHackWithR3(All_Weapons_One_Square)
	
	ORG $22DB0 //When selecting target (weapons) - WeaponOnHover
	gotoHackWithR3(All_Weapons_One_Square)
	
	ORG $23A08 //When selecting target (ballista) - FillBallistaRange
	//r1 is slot num
	SHORT $2100 //mov r1, #$0
	SHORT $46C0 //nop
	gotoHackWithR3(All_Weapons_One_Square)
	B($23A36)
    
    ORG $23A14 //Ballista range display
	SHORT $6820 $1C29 	//get unit pointer and item id
	callHack_r3(GetItemRangeM)
	SHORT $1C03 $1C0C
	B($23A2C)
	
	ORG $25756 //Ballista target selection
	SHORT $480C $6800 	//get unit pointer
	SHORT $1C39 	//mov r1, r7 @get item
	callHack_r3(GetItemRangeM)
	SHORT $1C03 $1C0C
	B($2576E)
    
    /*
    //Don't need because of above maybe?
	ORG $25736
	SHORT $1C07 //mov r7, r0
	SHORT $1C28 //mov r0, r5
	SHORT $1C31 //mov r1, r6
	BL($379D4) //GetSomeBallistaItemAt
	SHORT $1C01 //mov r1, r0
	SHORT $1C38 //mov r0, r7
	SHORT $2900 //cmp r1, #$0
	SHORT $D01D //beq $25782
	BL($251B4)
	B($25782)
    */
    
	ORG $23B40 //After moving to a specific square, for staffs - StaffUMCommandHover
	SHORT $480E $6800 $2401 $4264 $1C21 //ldr r0,AttackMap; ldr r0,[r0]; mov r4,1; neg r4,r4; mov r1,r4
	BL($197E4)
	SHORT $480C $6800 $2100 //ldr r0,RangeMap; ldr r0,[0]; mov r1,0
	BL($197E4)
	SHORT $6828 $1C21 //ldr r0,[r5]; mov r1,r4
	gotoHackWithR3(All_Staffs_One_Square)
	SHORT $46C0 //nop
	
	ORG $23C1A //When selecting target (staffs) - StaffOnHover
	SHORT $343C $2000 $5620 //add r4,3C; mov r0,0; ldsb r0,[r4,r0]
	BL($1E748)
	SHORT $480E $6800 $2101 $4249 //ldr r0,AttackMap; ldr r0,[r0]; mov r1,1; neg r1,r1
	BL($197E4)
	SHORT $480C $6800 $2100 //ldr r0,RangeMap; ldr r0,[r0]; mov r1,0
	BL($197E4)
	SHORT $6828 $2100 $5661
	gotoHackWithR3(All_Staffs_One_Square)
	SHORT $46C0 //nop
	
	ORG $251B4 //3B558 
	//080251b4 MakeTargetListForWeapon
	SHORT $B500 $1C0A $4904 $4B03
	BL($D18CC)
	BL($250BC)
	SHORT $BC08 $4718
	POIN Item_TURange|1 $2517D
	
	/*ORG $16BA6 //when selecting a target
	SHORT $46C0 $46C0 //skips a check that ensures min<max, which doesn't play nice with mag/2 NOTE: Originally bl'd to by the routine below, but shouldn't be necessary now?*/
	
	ORG $2A8C2 //determines whether you can actually attack the target
	SHORT $1C2A //mov r2,r5 (r5 has battle struct, but that should be fine)
	BL(Can_Attack_Target)
    
    ORG $16CC0 //Shows the correct range numbers when displaying an item's R-menu 
	jumpToHack(StatScreenRangeDisplay)
	jumpToHack(ItemDescRangeDisplay)
	MakeRangeText:
	#include "RangeTextDisplay/Make_Range_Text.lyn.event"
	
	ORG $89CEC	//range text for weapons
	BL($16CC8)
	ORG $89D90	//range text for staves
	BL($16CC8)
	
	//************** FREE SPACE IN BL RANGE, SO DON'T MOVE THIS IF YOU DON'T KNOW WHAT YOU'RE DOING *********************
	
	ORG $1ACBC // Writes the attackable squares for each square that can be moved to.
	All_Weapons_All_Squares:
	#include "RangeDisplay/All_Weapons_All_Squares.lyn.event"
	POIN All_Moveable_Squares|1
	
	ALIGN 4
	All_Staffs_All_Squares:
	#include "RangeDisplay/All_Staffs_All_Squares.lyn.event"
	POIN All_Moveable_Squares|1
	ALIGN 4
	/*
	Non_Unlock_Jump: //ldr r3, bx r3
	SHORT $4B00 $4718
	POIN Target_Routine_For_Non_Unlock|1
	*/
	Fortify_Jump:
	SHORT $4B00 $4718
	POIN Target_Routine_For_Fortify|1
	
	ALIGN 4
	Can_Attack_Target:
	#include "RangeDisplay/Can_Attack_Target.lyn.event"
	POIN GetItemRangeM|1
	
	GetItemRangeM_AIJump:
	SHORT $1C01 $4803 $6800 $0
	SHORT $4B00 $4718
	POIN GetItemRangeM|1
	WORD $3004E50
    
    
	
	//MESSAGE BLRange for IER ends at CURRENTOFFSET
	//************** CAN BE WRITTEN TO WHEREVER IF YOU WANT THIS SPACE FOR OTHER ASSEMBLY STUFF *********************
POP
	ALIGN 4
	BowrangeMods:
	#include "RangeDisplay/Check_For_Bowrange.lyn.event"
	
	ALIGN 4
	All_Weapons_One_Square:
	#include "RangeDisplay/All_Weapons_One_Square.lyn.event"
	POIN Return_Range_Bitfield|1
	POIN Write_Range|1
	
	ALIGN 4
	All_Staffs_One_Square:
	#include "RangeDisplay/All_Staffs_One_Square.lyn.event"
	POIN Return_Range_Bitfield|1
	POIN Write_Range|1	
	
	ALIGN 4
	All_Moveable_Squares:
	#include "RangeDisplay/All_Moveable_Squares.lyn.event"
	POIN Return_Range_Bitfield|1
	POIN Write_Range|1
	
	ALIGN 4
	Return_Range_Bitfield:
	#include "RangeDisplay/Return_Range_Bitfield_SpellSystem.lyn.event"
	POIN Get_Item_Range|1
	POIN Spells_Getter
	WORD SelectedSpellPointer
	ALIGN 4
	Get_Item_Range:
	#include "RangeDisplay/Get_Item_Range.lyn.event"
	POIN GetItemRangeM|1
	
	ALIGN 4
	Write_Range:
	#include "RangeDisplay/Write_Range.lyn.event"
	
	ALIGN 4
	Unknown_Function:
	#include "RangeDisplay/Unknown_Function.lyn.event"
	POIN Return_Range_Bitfield|1
	POIN Write_Range|1
	
	ALIGN 4
	Weapon_Attack:
	#include "RangeDisplay/Weapon_Attack.lyn.event"
	
	ALIGN 4
	
	StatScreenRangeDisplay:
	#include "RangeTextDisplay/Stat_Screen_Range.lyn.event"
	POIN GetItemRangeM|1 MakeRangeText|1
	
	ItemDescRangeDisplay:
	#include "RangeTextDisplay/Item_R_Button_Range.lyn.event"
	POIN RangeTextGetter|1 MakeRangeText|1
	
	/*
	//####### RANGE WRITING STUFF ######
	*/
    
    ALIGN 4
    Target_Routine_For_Fortify: //push r14; mov r2, #Fortify; bl somewhere; pop r0; bx r0 (r4+$12 has inventory slot, r0 has char data)
	SHORT $B500 
	BYTE Fortify $22
	BL(HealStaff_RangeSetup)
	SHORT $BC01 $4700
    
	ALIGN 4
	Torch_Fix:
	#include "RangeDisplay/Torch_Fix.lyn.event"
	POIN Item_TTRange|1
	WORD $0	//Torch targeting condition
	
	ALIGN 4
	
	HealStaff_RangeSetup:
		rfItemRangeSetup($25E28+1, Item_TURange)
	RestoreStaff_RangeSetup:
		rfItemRangeSetup($25F98+1,Item_TURange)
	SilenceStaff_RangeSetup:
		rfItemRangeSetup($26100+1,Item_TURange)
	SleepStaff_RangeSetup:
		rfItemRangeSetup($2614C+1,Item_TURange)
	WarpStaff_RangeSetup:
		rfItemRangeSetup($2625C+1,Item_TURange)
	RescueStaff_RangeSetup:
		rfItemRangeSetup($260A0+1,Item_TURange)
	HammerneStaff_RangeSetup:
		rfItemRangeSetup($262FC+1,Item_TURange)
	BarrierStaff_RangeSetup:
		rfItemRangeSetup($2601C+1,Item_TURange)
    //UnlockStaff_RangeSetup:
		//rfItemRangeSetup($25794+1,Item_TTRange)
	DancerRing_RangeSetup:
		rfItemRangeSetup($265B4+1,Item_TURange)
	/*	
	ALIGN 4
	Function_List: //These functions do extra checks (check if person in range has less than max hp, has a non-zero status byte, etc), along with some other stuff
	LL_Entry(Heal, $25E29)
	LL_Entry(Mend, $25E29)
	LL_Entry(Recover, $25E29)
	LL_Entry(Physic, $25E29)
	LL_Entry(Fortify, $25E29)
	LL_Entry(Restore, $25F99)
	LL_Entry(Silence, $26101)
	LL_Entry(Sleep, $2614D)
	LL_Entry(Berserk, $26199)
	LL_Entry(Warp, $2625D)
	LL_Entry(Rescue, $260A1)
	LL_Entry(Torch, $25E29) //shouldn't ever be go here, but just in case...
	LL_Entry(Hammerne, $262FD)
	LL_Entry(Unlock, $25795) //shouldn't go here either, since it's a special snowflake
	LL_Entry(Barrier, $2601D)
	LL_Entry(0, $25E29) //The catch-all, in case you add a custom staff and forget to update this table
	*/
#else
	ERROR "You're not assembling FE8 events!"
#endif
